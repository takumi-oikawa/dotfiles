[[plugins]]
repo = 'Shougo/dein.vim'

# most recentry used
[[plugins]]
repo = 'Shougo/neomru.vim'

# surround
[[plugins]]
repo = 'tpope/vim-surround'

# easy text align
[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
'''
# -------- language support ----------
[[plugins]]
repo = 'sheerun/vim-polyglot'
hook_add = '''
" disable bad plugins
let g:polyglot_disabled = ['markdown', 'csv']
" plantuml-syntax
" :make
let g:plantuml_executable_script="~/dotfiles/scripts/plantuml"
" vim-scala
au BufRead,BufNewFile *.sbt set filetype=scala
autocmd initvim FileType json syntax match Comment +\/\/.\+$+
" vim-terraform
let g:terraform_align=1
let g:terraform_fmt_on_save=1
'''

# bats
[[plugins]]
repo = 'vim-scripts/bats.vim'

# dash
[[plugins]]
repo = 'rizzatti/dash.vim'

# csv
[[plugins]]
repo = 'mechatroner/rainbow_csv'

# multi syntax contexts in the same file.
[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'Shougo/context_filetype.vim'
hook_add = '''
  if !exists('g:context_filetype#filetypes')
    let g:context_filetype#filetypes = {}
  endif
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
if = '''executable('node') && executable('yarn')'''
build = './install.sh nightly'
merged = '0'
hook_add = '''
" Global extension names to install when they aren't installed,
let g:coc_global_extensions = [
  \ 'coc-snippets',
  \ 'coc-pairs',
  \ 'coc-tsserver',
  \ 'coc-eslint',
  \ 'coc-prettier',
  \ 'coc-json',
  \ ]
" Better display for messages
set cmdheight=2
" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300
" don't give |ins-completion-menu| messages.
set shortmess+=c
" always show signcolumns
set signcolumn=yes
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> ge <Plug>(coc-diagnostic-next-error)
nmap <silent> gw <Plug>(coc-diagnostic-next)

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd initvim CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)
'''

[[plugins]]
repo = 'junegunn/goyo.vim'

[[plugins]]
repo = 'honza/vim-snippets'
